import itertools

def travelling_salesman_problem(graph):
    """
    Solves the Travelling Salesman Problem using the Held-Karp algorithm.

    Parameters:
    graph (dict): A dictionary where keys are node names and values are dictionaries
                  of neighboring node names and their corresponding edge weights.

    Returns:
    tuple: The length of the shortest path and the order of nodes in that path.
    """
    # Get list of nodes
    nodes = list(graph.keys())
    n = len(nodes)
    all_sets = []
    g = {}
    p = []
    
    # Initialize memoization table
    for x in range(1, n):
        g[(1 << x, x)] = graph['0'][str(x)]
    
    for subset_size in range(2, n):
        for subset in itertools.combinations(range(1, n), subset_size):
            bits = 0
            for bit in subset:
                bits |= 1 << bit
            
            for k in subset:
                prev_bits = bits & ~(1 << k)
                result = []
                for m in subset:
                    if m == 0 or m == k:
                        continue
                    result.append((g[(prev_bits, m)] + graph[str(m)][str(k)], m))
                g[(bits, k)] = min(result)[0]
                p.append((bits, k, min(result)[1]))
    
    bits = (2 ** n - 1) - 1
    result = []
    for k in range(1, n):
        result.append((g[(bits, k)] + graph[str(k)]['0'], k))
    opt, parent = min(result)
    
    # Reconstruct path
    path = []
    for i in range(n - 1):
        path.append(parent)
        bits = bits & ~(1 << parent)
        for j in p:
            if j[0] == bits and j[1] == parent:
                parent = j[2]
                break
    path.append(0)
    path = list(map(str, path))
    
    return opt, path[::-1]

# Example usage:
if _name_ == "_main_":
    graph = {
        '0': {'1': 10, '2': 15, '3': 20},
        '1': {'0': 10, '2': 35, '3': 25},
        '2': {'0': 15, '1': 35, '3': 30},
        '3': {'0': 20, '1': 25, '2': 30}
    }
    
    cost, path = travelling_salesman_problem(graph)
    print("Minimum cost:", cost)
    print("Optimal path:", " -> ".join(path))
